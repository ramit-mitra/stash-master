{"version":3,"sources":["webpack:///./src/main/js/components/shared/Organization.tsx","webpack:///./node_modules/lodash/differenceWith.js","webpack:///./node_modules/lodash/partition.js","webpack:///./node_modules/lodash/uniqWith.js","webpack:///./src/main/js/apps/account/notifications/NotificationsList.tsx","webpack:///./src/main/js/apps/account/notifications/GlobalNotifications.tsx","webpack:///./src/main/js/apps/account/notifications/ProjectNotifications.tsx","webpack:///./src/main/js/apps/account/notifications/Projects.tsx","webpack:///./src/main/js/apps/account/notifications/Notifications.tsx","webpack:///./src/main/js/api/notifications.ts","webpack:///./src/main/js/apps/account/notifications/NotificationsContainer.tsx","webpack:///./node_modules/lodash/groupBy.js"],"names":["Organization","props","_a","link","organization","shouldBeDisplayed","react__WEBPACK_IMPORTED_MODULE_0__","_ui_OrganizationLink__WEBPACK_IMPORTED_MODULE_3__","className","linkClassName","name","Object","react_redux__WEBPACK_IMPORTED_MODULE_1__","state","ownProps","_store_rootReducer__WEBPACK_IMPORTED_MODULE_2__","organizationKey","baseDifference","__webpack_require__","baseFlatten","baseRest","isArrayLikeObject","last","differenceWith","array","values","comparator","undefined","module","exports","partition","createAggregator","result","value","key","push","baseUniq","length","_super","NotificationsList","__extends","prototype","isEnabled","type","channel","this","notifications","find","notification","handleCheck","checked","onAdd","onRemove","getDispatcherLabel","dispatcher","globalMessageKey","projectMessageKey","concat","project","l10n","apply","render","_this","channels","checkboxId","types","index_js_exposed","map","Checkbox","id","onCheck","GlobalNotifications","notifications_NotificationsList","getCheckboxId","addNotification","removeNotification","ProjectNotifications","arguments","handleAddNotification","projectName","handleRemoveNotification","ProjectNotifications_extends","react_router_es","to","urls","Projects","addedProjects","loadOptions","query","Promise","resolve","options","components","then","r","projects","results","domain","q","items","filter","p","label","handleAddProject","selected","setState","renderOption","option","Projects_extends","componentWillReceiveProps","nextProps","differenceWith_default","keys","stateProject","propsProjectKey","allProjects","notifications_ProjectNotifications","notificationsByProject","Select","autoload","cache","onChange","optionRenderer","placeholder","Notifications","mounted","globalTypes","loading","perProjectTypes","fetchNotifications","request","catch","throwGlobalError","response","context","organizationsEnabled","organizations","uniq_default","n","fetchOrganizations","addNotificationToState","added","uniqWith_default","areNotificationsEqual","removeNotificationFromState","removed","data","Notifications_extends","componentDidMount","componentWillUnmount","partition_default","globalNotifications","projectNotifications","uniqBy_default","groupBy_default","Helmet_default","a","title","DeferredSpinner","notifications_Projects","contextTypes","prop_types","b","mapDispatchToProps","__webpack_exports__","es","notifications_Notifications","baseAssignValue","hasOwnProperty","groupBy","call"],"mappings":"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","file":"js/270.8fc233e8.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { getOrganizationByKey, areThereCustomOrganizations } from '../../store/rootReducer';\nimport OrganizationLink from '../ui/OrganizationLink';\n\ninterface OwnProps {\n  organizationKey: string;\n}\n\ninterface Props {\n  link?: boolean;\n  linkClassName?: string;\n  organization: { key: string; name: string } | null;\n  shouldBeDisplayed: boolean;\n}\n\nfunction Organization(props: Props) {\n  const { link = true, organization, shouldBeDisplayed } = props;\n\n  if (!shouldBeDisplayed || !organization) {\n    return null;\n  }\n\n  return (\n    <span>\n      {link ? (\n        <OrganizationLink className={props.linkClassName} organization={organization}>\n          {organization.name}\n        </OrganizationLink>\n      ) : (\n        organization.name\n      )}\n      <span className=\"slash-separator\" />\n    </span>\n  );\n}\n\nconst mapStateToProps = (state: any, ownProps: OwnProps) => ({\n  organization: getOrganizationByKey(state, ownProps.organizationKey),\n  shouldBeDisplayed: areThereCustomOrganizations(state)\n});\n\nexport default connect<any, any, any>(mapStateToProps)(Organization);\n\nexport const UnconnectedOrganization = Organization;\n","var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. The order and\n * references of result values are determined by the first array. The comparator\n * is invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = baseRest(function(array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n    : [];\n});\n\nmodule.exports = differenceWith;\n","var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","var baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The order of result values is\n * determined by the order they occur in the array.The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n}\n\nmodule.exports = uniqWith;\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Notification } from '../../../app/types';\nimport Checkbox from '../../../components/controls/Checkbox';\nimport { translate, hasMessage } from '../../../helpers/l10n';\n\ninterface Props {\n  onAdd: (n: Notification) => void;\n  onRemove: (n: Notification) => void;\n  channels: string[];\n  checkboxId: (type: string, channel: string) => string;\n  project?: boolean;\n  types: string[];\n  notifications: Notification[];\n}\n\nexport default class NotificationsList extends React.PureComponent<Props> {\n  isEnabled(type: string, channel: string) {\n    return !!this.props.notifications.find(\n      notification => notification.type === type && notification.channel === channel\n    );\n  }\n\n  handleCheck(type: string, channel: string, checked: boolean) {\n    if (checked) {\n      this.props.onAdd({ type, channel });\n    } else {\n      this.props.onRemove({ type, channel });\n    }\n  }\n\n  getDispatcherLabel(dispatcher: string) {\n    const globalMessageKey = ['notification.dispatcher', dispatcher];\n    const projectMessageKey = [...globalMessageKey, 'project'];\n    const shouldUseProjectMessage = this.props.project && hasMessage(...projectMessageKey);\n    return shouldUseProjectMessage\n      ? translate(...projectMessageKey)\n      : translate(...globalMessageKey);\n  }\n\n  render() {\n    const { channels, checkboxId, types } = this.props;\n\n    return (\n      <tbody>\n        {types.map(type => (\n          <tr key={type}>\n            <td>{this.getDispatcherLabel(type)}</td>\n            {channels.map(channel => (\n              <td className=\"text-center\" key={channel}>\n                <Checkbox\n                  checked={this.isEnabled(type, channel)}\n                  id={checkboxId(type, channel)}\n                  onCheck={checked => this.handleCheck(type, channel, checked)}\n                />\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport NotificationsList from './NotificationsList';\nimport { Notification } from '../../../app/types';\nimport { translate } from '../../../helpers/l10n';\n\ninterface Props {\n  addNotification: (n: Notification) => void;\n  channels: string[];\n  notifications: Notification[];\n  removeNotification: (n: Notification) => void;\n  types: string[];\n}\n\nexport default function GlobalNotifications(props: Props) {\n  return (\n    <section className=\"boxed-group\">\n      <h2>{translate('my_profile.overall_notifications.title')}</h2>\n\n      <div className=\"boxed-group-inner\">\n        <table className=\"form\">\n          <thead>\n            <tr>\n              <th />\n              {props.channels.map(channel => (\n                <th className=\"text-center\" key={channel}>\n                  <h4>{translate('notification.channel', channel)}</h4>\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          <NotificationsList\n            channels={props.channels}\n            checkboxId={getCheckboxId}\n            notifications={props.notifications}\n            onAdd={props.addNotification}\n            onRemove={props.removeNotification}\n            types={props.types}\n          />\n        </table>\n      </div>\n    </section>\n  );\n}\n\nfunction getCheckboxId(type: string, channel: string) {\n  return `global-notification-${type}-${channel}`;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Link } from 'react-router';\nimport NotificationsList from './NotificationsList';\nimport { NotificationProject } from './types';\nimport { Notification } from '../../../app/types';\nimport Organization from '../../../components/shared/Organization';\nimport { translate } from '../../../helpers/l10n';\nimport { getProjectUrl } from '../../../helpers/urls';\n\ninterface Props {\n  addNotification: (n: Notification) => void;\n  channels: string[];\n  notifications: Notification[];\n  project: NotificationProject;\n  removeNotification: (n: Notification) => void;\n  types: string[];\n}\n\nexport default class ProjectNotifications extends React.PureComponent<Props> {\n  getCheckboxId = (type: string, channel: string) => {\n    return `project-notification-${this.props.project.key}-${type}-${channel}`;\n  };\n\n  handleAddNotification = ({ channel, type }: { channel: string; type: string }) => {\n    this.props.addNotification({\n      channel,\n      type,\n      project: this.props.project.key,\n      projectName: this.props.project.name,\n      organization: this.props.project.organization\n    });\n  };\n\n  handleRemoveNotification = ({ channel, type }: { channel: string; type: string }) => {\n    this.props.removeNotification({\n      channel,\n      type,\n      project: this.props.project.key\n    });\n  };\n\n  render() {\n    const { project, channels } = this.props;\n\n    return (\n      <table className=\"form big-spacer-bottom\" key={project.key}>\n        <thead>\n          <tr>\n            <th>\n              <span className=\"text-normal\">\n                <Organization organizationKey={project.organization} />\n              </span>\n              <h4 className=\"display-inline-block\">\n                <Link to={getProjectUrl(project.key)}>{project.name}</Link>\n              </h4>\n            </th>\n            {channels.map(channel => (\n              <th className=\"text-center\" key={channel}>\n                <h4>{translate('notification.channel', channel)}</h4>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <NotificationsList\n          channels={this.props.channels}\n          checkboxId={this.getCheckboxId}\n          notifications={this.props.notifications}\n          onAdd={this.handleAddNotification}\n          onRemove={this.handleRemoveNotification}\n          project={true}\n          types={this.props.types}\n        />\n      </table>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { differenceWith } from 'lodash';\nimport ProjectNotifications from './ProjectNotifications';\nimport { NotificationProject } from './types';\nimport { getSuggestions } from '../../../api/components';\nimport { Notification } from '../../../app/types';\nimport { AsyncSelect } from '../../../components/controls/Select';\nimport Organization from '../../../components/shared/Organization';\nimport { translate } from '../../../helpers/l10n';\n\nexport interface Props {\n  addNotification: (n: Notification) => void;\n  channels: string[];\n  notificationsByProject: { [project: string]: Notification[] };\n  projects: NotificationProject[];\n  removeNotification: (n: Notification) => void;\n  types: string[];\n}\n\ninterface State {\n  addedProjects: NotificationProject[];\n}\n\nexport default class Projects extends React.PureComponent<Props, State> {\n  state: State = { addedProjects: [] };\n\n  componentWillReceiveProps(nextProps: Props) {\n    // remove all projects from `this.state.addedProjects`\n    // that already exist in `nextProps.projects`\n    this.setState(state => ({\n      addedProjects: differenceWith(\n        state.addedProjects,\n        Object.keys(nextProps.projects),\n        (stateProject, propsProjectKey) => stateProject.key !== propsProjectKey\n      )\n    }));\n  }\n\n  loadOptions = (query: string) => {\n    if (query.length < 2) {\n      return Promise.resolve({ options: [] });\n    }\n\n    return getSuggestions(query)\n      .then(r => {\n        const projects = r.results.find(domain => domain.q === 'TRK');\n        return projects ? projects.items : [];\n      })\n      .then(projects => {\n        return projects\n          .filter(\n            project =>\n              !this.props.projects.find(p => p.key === project.key) &&\n              !this.state.addedProjects.find(p => p.key === project.key)\n          )\n          .map(project => ({\n            value: project.key,\n            label: project.name,\n            organization: project.organization\n          }));\n      })\n      .then(options => {\n        return { options };\n      });\n  };\n\n  handleAddProject = (selected: { label: string; organization: string; value: string }) => {\n    const project = {\n      key: selected.value,\n      name: selected.label,\n      organization: selected.organization\n    };\n    this.setState(state => ({\n      addedProjects: [...state.addedProjects, project]\n    }));\n  };\n\n  renderOption = (option: { label: string; organization: string; value: string }) => {\n    return (\n      <span>\n        <Organization link={false} organizationKey={option.organization} />\n        <strong>{option.label}</strong>\n      </span>\n    );\n  };\n\n  render() {\n    const allProjects = [...this.props.projects, ...this.state.addedProjects];\n\n    return (\n      <section className=\"boxed-group\">\n        <h2>{translate('my_profile.per_project_notifications.title')}</h2>\n\n        <div className=\"boxed-group-inner\">\n          {allProjects.length === 0 && (\n            <div className=\"note\">{translate('my_account.no_project_notifications')}</div>\n          )}\n\n          {allProjects.map(project => (\n            <ProjectNotifications\n              addNotification={this.props.addNotification}\n              channels={this.props.channels}\n              key={project.key}\n              notifications={this.props.notificationsByProject[project.key] || []}\n              project={project}\n              removeNotification={this.props.removeNotification}\n              types={this.props.types}\n            />\n          ))}\n\n          <div className=\"spacer-top panel bg-muted\">\n            <span className=\"text-middle spacer-right\">\n              {translate('my_account.set_notifications_for')}:\n            </span>\n            <AsyncSelect\n              autoload={false}\n              cache={false}\n              className=\"input-super-large\"\n              loadOptions={this.loadOptions}\n              name=\"new_project\"\n              onChange={this.handleAddProject}\n              optionRenderer={this.renderOption}\n              placeholder={translate('my_account.search_project')}\n            />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { groupBy, partition, uniq, uniqBy, uniqWith } from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport GlobalNotifications from './GlobalNotifications';\nimport Projects from './Projects';\nimport { NotificationProject } from './types';\nimport * as api from '../../../api/notifications';\nimport { Notification } from '../../../app/types';\nimport DeferredSpinner from '../../../components/common/DeferredSpinner';\nimport { translate } from '../../../helpers/l10n';\n\nexport interface Props {\n  fetchOrganizations: (organizations: string[]) => void;\n}\n\ninterface State {\n  channels: string[];\n  globalTypes: string[];\n  loading: boolean;\n  notifications: Notification[];\n  perProjectTypes: string[];\n}\n\nexport default class Notifications extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  static contextTypes = {\n    organizationsEnabled: PropTypes.bool\n  };\n\n  state: State = {\n    channels: [],\n    globalTypes: [],\n    loading: true,\n    notifications: [],\n    perProjectTypes: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchNotifications();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchNotifications = () => {\n    api.getNotifications().then(\n      response => {\n        if (this.mounted) {\n          if (this.context.organizationsEnabled) {\n            const organizations = uniq(response.notifications\n              .filter(n => n.organization)\n              .map(n => n.organization) as string[]);\n            this.props.fetchOrganizations(organizations);\n          }\n\n          this.setState({\n            channels: response.channels,\n            globalTypes: response.globalTypes,\n            loading: false,\n            notifications: response.notifications,\n            perProjectTypes: response.perProjectTypes\n          });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  addNotificationToState = (added: Notification) => {\n    this.setState(state => ({\n      notifications: uniqWith([...state.notifications, added], areNotificationsEqual)\n    }));\n  };\n\n  removeNotificationFromState = (removed: Notification) => {\n    this.setState(state => ({\n      notifications: state.notifications.filter(\n        notification => !areNotificationsEqual(notification, removed)\n      )\n    }));\n  };\n\n  addNotification = (added: Notification) => {\n    // optimistic update\n    this.addNotificationToState(added);\n\n    // recreate `data` to omit `projectName` and `organization` from `Notification`\n    const data = { channel: added.channel, project: added.project, type: added.type };\n    api.addNotification(data).catch(() => {\n      this.removeNotificationFromState(added);\n    });\n  };\n\n  removeNotification = (removed: Notification) => {\n    // optimistic update\n    this.removeNotificationFromState(removed);\n\n    // recreate `data` to omit `projectName` and `organization` from `Notification`\n    const data = { channel: removed.channel, project: removed.project, type: removed.type };\n    api.removeNotification(data).catch(() => {\n      this.addNotificationToState(removed);\n    });\n  };\n\n  render() {\n    const [globalNotifications, projectNotifications] = partition(\n      this.state.notifications,\n      n => !n.project\n    );\n    const projects = uniqBy(\n      projectNotifications.map(n => ({\n        key: n.project,\n        name: n.projectName,\n        organization: n.organization\n      })) as NotificationProject[],\n      project => project.key\n    );\n    const notificationsByProject = groupBy(projectNotifications, n => n.project);\n\n    return (\n      <div className=\"account-body account-container\">\n        <Helmet title={translate('my_account.notifications')} />\n        <p className=\"alert alert-info\">{translate('notification.dispatcher.information')}</p>\n        <DeferredSpinner loading={this.state.loading}>\n          {this.state.notifications && (\n            <>\n              <GlobalNotifications\n                addNotification={this.addNotification}\n                channels={this.state.channels}\n                notifications={globalNotifications}\n                removeNotification={this.removeNotification}\n                types={this.state.globalTypes}\n              />\n              <Projects\n                addNotification={this.addNotification}\n                channels={this.state.channels}\n                notificationsByProject={notificationsByProject}\n                projects={projects}\n                removeNotification={this.removeNotification}\n                types={this.state.perProjectTypes}\n              />\n            </>\n          )}\n        </DeferredSpinner>\n      </div>\n    );\n  }\n}\n\nfunction areNotificationsEqual(a: Notification, b: Notification) {\n  return a.channel === b.channel && a.type === b.type && a.project === b.project;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Notification } from '../app/types';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { getJSON, post } from '../helpers/request';\n\nexport function getNotifications(): Promise<{\n  channels: string[];\n  globalTypes: string[];\n  notifications: Notification[];\n  perProjectTypes: string[];\n}> {\n  return getJSON('/api/notifications/list').catch(throwGlobalError);\n}\n\nexport function addNotification(data: { channel: string; type: string; project?: string }) {\n  return post('/api/notifications/add', data).catch(throwGlobalError);\n}\n\nexport function removeNotification(data: { channel: string; type: string; project?: string }) {\n  return post('/api/notifications/remove', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2018 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { connect } from 'react-redux';\nimport Notifications, { Props } from './Notifications';\nimport { fetchOrganizations } from '../../../store/rootActions';\n\nconst mapDispatchToProps = { fetchOrganizations } as Pick<Props, 'fetchOrganizations'>;\n\nexport default connect(null, mapDispatchToProps)(Notifications);\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nmodule.exports = groupBy;\n"],"sourceRoot":""}